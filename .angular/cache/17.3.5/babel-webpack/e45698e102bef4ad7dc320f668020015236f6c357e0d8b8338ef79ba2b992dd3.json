{"ast":null,"code":"import _asyncToGenerator from \"/Users/daniilsedunov/Documents/GitHub/hockey_events_rsvp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { getToken, deleteToken, onMessage } from '@firebase/messaging';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { onBackgroundMessage } from '@firebase/messaging/sw';\nconst name = \"@firebase/messaging-compat\";\nconst version = \"0.2.8\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\r\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\r\n */\nfunction isWindowSupported() {\n  return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\nfunction isSwSupported() {\n  return isIndexedDBAvailable() && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\nclass MessagingCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  getToken(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return getToken(_this._delegate, options);\n    })();\n  }\n  deleteToken() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return deleteToken(_this2._delegate);\n    })();\n  }\n  onMessage(nextOrObserver) {\n    return onMessage(this._delegate, nextOrObserver);\n  }\n  onBackgroundMessage(nextOrObserver) {\n    return onBackgroundMessage(this._delegate, nextOrObserver);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst messagingCompatFactory = container => {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());\n  } else {\n    // in window\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());\n  }\n};\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\nfunction registerMessagingCompat() {\n  firebase.INTERNAL.registerComponent(new Component('messaging-compat', messagingCompatFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(NAMESPACE_EXPORTS));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);\n//# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}