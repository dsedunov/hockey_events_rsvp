{"ast":null,"code":"import { AngularFireDatabase } from '@angular/fire/compat/database';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFireMessaging } from '@angular/fire/compat/messaging';\nimport { take } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/database\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/fire/compat/auth\";\nimport * as i4 from \"@angular/fire/compat/messaging\";\nexport let MessagingService = /*#__PURE__*/(() => {\n  class MessagingService {\n    constructor(angularFireDB, snackBar, angularFireAuth, angularFireMessaging) {\n      this.angularFireDB = angularFireDB;\n      this.snackBar = snackBar;\n      this.angularFireAuth = angularFireAuth;\n      this.angularFireMessaging = angularFireMessaging;\n      this.currentMessage = new BehaviorSubject(null);\n    }\n    listen() {\n      this.angularFireMessaging.messages.subscribe(message => {\n        console.log(message);\n      });\n    }\n    /**\n     * update token in firebase database\n     *\n     * @param userId userId as a key\n     * @param token token as a value\n     */\n    updateToken(userId, token) {\n      // we can change this function to request our backend service\n      this.angularFireAuth.authState.pipe(take(1)).subscribe(() => {\n        const data = {};\n        data[userId] = token;\n        this.angularFireDB.object('fcmTokens/').update(data);\n      });\n    }\n    /**\n     * request permission for notification from firebase cloud messaging\n     *\n     * @param userId userId\n     */\n    requestPermission(userId) {\n      this.angularFireMessaging.requestToken.subscribe(token => {\n        console.log(token);\n        this.updateToken(userId, token);\n      }, err => {\n        console.error('Unable to get permission to notify.', err);\n      });\n    }\n    /**\n     * hook method when new notification received in foreground\n     */\n    receiveMessage() {\n      this.angularFireMessaging.messages.subscribe(payload => {\n        console.log('new message received.', payload);\n        this.currentMessage.next(payload);\n        this.snackBar.open('Сообщение пришло', 'ok', {\n          duration: 10000\n        });\n      });\n    }\n    static #_ = this.ɵfac = function MessagingService_Factory(t) {\n      return new (t || MessagingService)(i0.ɵɵinject(i1.AngularFireDatabase), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.AngularFireAuth), i0.ɵɵinject(i4.AngularFireMessaging));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MessagingService,\n      factory: MessagingService.ɵfac\n    });\n  }\n  return MessagingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}