{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nlet EventsViewComponent = class EventsViewComponent {\n  constructor(afs, activatedRoute, router, eventFormBuilder, firebaseAuth, snackBar) {\n    this.afs = afs;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.eventFormBuilder = eventFormBuilder;\n    this.firebaseAuth = firebaseAuth;\n    this.snackBar = snackBar;\n    this.user = null;\n    this.colorSelected = '';\n    this.colors = [{\n      value: 'Черный',\n      viewValue: 'Черный'\n    }, {\n      value: 'Белый',\n      viewValue: 'Белый'\n    }];\n  }\n  ngOnInit() {\n    const usersRef = this.afs.collection('users').doc(this.firebaseAuth.auth.currentUser.email.toLowerCase()).ref;\n    usersRef.get().then(doc => {\n      if (doc.exists) {\n        this.user = doc.data();\n        this.user.uid = this.firebaseAuth.auth.currentUser.uid;\n        const userId = this.user.uid;\n      } else {\n        console.log('No such document!');\n      }\n    }).catch(err => {\n      console.log('Error getting document', err);\n    });\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.changedEvent = JSON.parse(params.param);\n      console.log(this.changedEvent);\n    });\n    this.whiteListCollection = this.afs.collection('list');\n    this.whiteListCollection.snapshotChanges().subscribe(([usersWhiteList]) => {\n      const whiteListArr = Object.keys(usersWhiteList.payload.doc.data());\n      this.usersCollection = this.afs.collection('users', ref => ref.limit(200));\n      this.usersCollection.snapshotChanges().subscribe(usersRef => {\n        const users = usersRef.map(userRef => {\n          return userRef.payload.doc.data();\n        });\n        this.changedEvent.players.accept = this.changedEvent.players.accept.sort(({\n          role: roleA\n        }, {\n          role: roleB\n        }) => {\n          return roleA !== 'Вратарь' ? 1 : -1;\n        });\n        const accptedUID = this.changedEvent.players.accept && this.changedEvent.players.accept.map(player => player.uid);\n        const rejectedUID = this.changedEvent.players.reject && this.changedEvent.players.reject.map(player => player.uid);\n        // const league = this.changedEvent.players && this.user.league.map(player => player.league);\n        this.noVotedUsers = users.filter(user => {\n          return whiteListArr.indexOf(user.uid) !== -1 && accptedUID.indexOf(user.uid) === -1 && rejectedUID.indexOf(user.uid) === -1;\n        })\n        // .filter(user => {\n        //   return (whiteListArr.indexOf(user.league) !== -1 && league.indexOf(user.league)); })\n        .sort(({\n          role: roleA\n        }, {\n          role: roleB\n        }) => {\n          return roleA !== 'Вратарь' ? 1 : -1;\n        });\n      });\n    });\n  }\n  backToHome() {\n    this.router.navigateByUrl('/home');\n  }\n  addGuetst() {\n    this.changedEvent = {\n      ...this.changedEvent,\n      gameDay: this.changedEvent.gameDayISO,\n      players: [{\n        name: 'newBoi',\n        status: 'accept'\n      }, ...this.changedEvent.players.accept, ...this.changedEvent.players.reject]\n    };\n    delete this.changedEvent.gameDayISO;\n    this.afs.collection('events').doc(this.changedEvent.id).set(this.changedEvent).then(() => {\n      this.snackBar.open('Гость успешно добавлен', 'ok', {\n        duration: 10000\n      });\n      this.router.navigateByUrl('/home');\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  updateRoster() {\n    this.changedEvent = {\n      ...this.changedEvent,\n      gameDay: this.changedEvent.gameDayISO,\n      players: [...this.changedEvent.players.accept, ...this.changedEvent.players.reject]\n    };\n    delete this.changedEvent.gameDayISO;\n    this.afs.collection('events').doc(this.changedEvent.id).set(this.changedEvent).then(() => {\n      this.snackBar.open('Данные успешно изменены', 'ok', {\n        duration: 10000\n      });\n      this.router.navigateByUrl('/home');\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n};\nEventsViewComponent = __decorate([Component({\n  selector: 'app-events-view',\n  templateUrl: './events-view.component.html',\n  styleUrls: ['./events-view.component.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ActivatedRoute, Router, FormBuilder, typeof (_b = typeof AngularFireAuth !== \"undefined\" && AngularFireAuth) === \"function\" ? _b : Object, MatSnackBar])], EventsViewComponent);\nexport { EventsViewComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}